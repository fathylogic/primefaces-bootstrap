h1. Soluvas Starter Web Application

h2. Curl Configuration

bc. export BASE_URI='http://localhost:9080/primefaces-bootstrap'

h2. RabbitMQ-Stomp-Web

Setup instructions:

http://www.rabbitmq.com/blog/2012/05/14/introducing-rabbitmq-web-stomp/

1. You need at least Erlang R14 (more info).
2. You need Rabbitmq-server 2.8.2 installed
3. Grab the needed erlang plugin .ez files:

bc. wget \
  http://www.rabbitmq.com/releases/plugins/v2.8.2-web-stomp-preview/cowboy-0.5.0-rmq2.8.2-git4b93c2d.ez \
  http://www.rabbitmq.com/releases/plugins/v2.8.2-web-stomp-preview/sockjs-0.2.1-rmq2.8.2-gitfa1db96.ez \
  http://www.rabbitmq.com/releases/plugins/v2.8.2-web-stomp-preview/rabbitmq_web_stomp-2.8.2.ez \
  http://www.rabbitmq.com/releases/plugins/v2.8.2-web-stomp-preview/rabbitmq_web_stomp_examples-2.8.2.ez

4. Next, copy them to the plugins directory. For example, on my Ubuntu box this will be:

bc. sudo cp -v *.ez /usr/lib/rabbitmq/lib/rabbitmq_server-2.8.2/plugins
sudo chmod -c a-x /usr/lib/rabbitmq/lib/rabbitmq_server-2.8.2/plugins/*.ez

5. Now, you're ready to enable them using @rabbitmq-plugins@:

bc. rabbitmq-plugins enable rabbitmq_web_stomp
rabbitmq-plugins enable rabbitmq_web_stomp-examples

6. Restart the rabbitmq server. On ubuntu:

bc. sudo service rabbitmq-server restart


h2. Routing Plan

All destinations are AMQP Topics. The following are the routing keys:

* @person.{personId}@. Subscribing to a person gets all public events about that person (which currently is none). Filter on @personId@ header.
** @notification@ (public). Subscribing to a person's notification channel gets all public events for that person.
** @notification_private@ (private). Subscribing to a person's notification channel gets all private events monitored by that person.
   This is a privileged operation and requires proper access token/browser session.
* @product.{productId}@. Consume all @story@ collection, @comment@ collection, and @notification@ changes about a product(s). Subscribing to this topic is normally done when viewing a product page.
** @story@. Subscribing to a product's story gets all story changes. However, JS push client should simply subscribe to the product itself.
** @comment@. Subscribing to a product's comment gets all comment changes. However, JS push client should simply subscribe to the product itself.
** @notification@. Gets all new notifications.

Note that subscribing to a product channel is not the same as a Person liking a product. Subscribing is an infrastructural action done by the JS push client to the push message broker.
Liking a product is a business domain action (which can be implemented using a messaging broker but not at all related to a push message broker broadcasting events to JS push clients).

h3. Client

When there is a change in product comment, a @CollectionAdd<Comment>@ message is sent to the @product.{productId}.comment@ topic.

There is also notification, a @CollectionAdd<Notification>@ is sent to @product.{productId}.notification@ topic.


h2. JCR Resource

TODO

h2. Comment Resource

h3. List Comments

bc. curl http://localhost:9080/primefaces-bootstrap/api/comment/

h3. Create Comment

bc. curl -v -H 'Content-type: application/json' http://localhost:9080/primefaces-bootstrap/api/comment/ -d '{"authorName":"Hendy","body":"Eh keren"}'

h3. Delete Comment

bc. curl -X DELETE http://localhost:9080/primefaces-bootstrap/api/comment/67da80b7-2f0c-43b9-8d13-242f8f441593

h3. Edit Comment

bc. curl -X PUT -H 'Content-type: application/json' http://localhost:9080/primefaces-bootstrap/api/comment/b12b3dd7-dbcb-48ca-ac48-f90750f94656 -d '{"body":"Bagooooos"}'


h2. Game Resource

h3. List games

bc. curl $BASE_URI/api/browser/game/

h3. Create Game

bc. curl -H 'Content-type: application/json' -d '{"name": "Wiwahahaha", "releaseDate": 2009}' $BASE_URI/api/browser/game/

h2. Push

h3. Broadcasting something via amqp-publish

bc. amqp-publish -e amq.topic -r product.zibalabel_t01.comment -b '{some: "Data"}'


h3. Broadcast something via JavaScript in browser

See *stomp.js*-WebSocket documentation.
